---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

interface Props {
  entry: CollectionEntry<'worlds'>;
}

const { entry } = Astro.props;
const { Content } = await entry.render();

import Landing from '@layouts/Landing.astro';

import { Card, CardSeparator, Placeholder, PlaceholderLoading } from '@components/mc';
import { ServerPlayers, ServerStatistics } from '@components/server';
import { BuildingItem, WorldItem } from '@components/items';

import Spacer from '@components/Spacer.astro';

export async function getStaticPaths() {
  const allWorlds = await getCollection('worlds');

  return allWorlds.map((world: CollectionEntry<'worlds'>) => ({
    params: { slug: world.slug }, props: { entry: world }
  }));
}

const worldBuildings = (await getCollection("buildings", ({ data }) => {
  return data.world.slug == entry.slug
})).sort(
  (a, b) => Date.parse(b.data.date.toString()) - Date.parse(a.data.date.toString())
);

---

<Landing page_title={entry.data.title}>

  <Card>
    <WorldItem item={entry} clickable={false} />
  </Card>

  <Card title="Список активных игроков">
		<ServerPlayers client:load address={entry.slug}>
			<PlaceholderLoading slot="loading" />
			<Placeholder slot="offline">Сервер оффлайн :(</Placeholder>
			<Placeholder slot="no_players">На сервере никого нет :(</Placeholder>
		</ServerPlayers>
	</Card>

	<Card title="Статистика">
		<ServerStatistics client:load address={entry.slug}>
			<PlaceholderLoading slot="loading" />
			<Placeholder slot="error">Ошибка загрузки</Placeholder>
			<CardSeparator slot="separator" />
		</ServerStatistics>
	</Card>

	<Card title="Постройки">
    { worldBuildings.length == 0 &&
			<Placeholder>Пока-что построек нет</Placeholder>
    }
		{ worldBuildings.map((item, index, array) => (
			<>
				<BuildingItem {item} />
				{ (++index != array.length) && <CardSeparator /> }
			</>
		)) }
	</Card>

	<Spacer height="100" />
</Landing>